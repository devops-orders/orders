# Copyright 2016, 2019 John J. Rofrano. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""
Order Service

Paths:
------
GET /orders - Returns a list all of the Orders
GET /orders/{id} - Returns the Order with a given id number
POST /orders - creates a new order record in the database
PUT /orders/{id} - updates an order record in the database
DELETE /orders/{id} - deletes an order record in the database
GET /orders/customers/:customer_id - return orders for given customer
GET /orders/products/:product_id - return orders for given product
PUT /orders/cancel/:id - cancel an order for a given order id
"""

import logging
from functools import wraps
from flask import Flask, jsonify, request, url_for, make_response, abort
from flask_api import status    # HTTP Status Codes
from flask_restplus import Api as BaseApi, Resource, fields, reqparse, inputs
from werkzeug.exceptions import NotFound

# For this example we'll use SQLAlchemy, a popular ORM that supports a
# variety of backends including SQLite, MySQL, and PostgreSQL
from flask_sqlalchemy import SQLAlchemy
# from service.models import order, DataValidationError
from service.models import Order, DataValidationError

# Import Flask application
from . import app

class Api(BaseApi):

    def _register_doc(self, app_or_blueprint):
        # HINT: This is just a copy of the original implementation with the last line commented out.
        if self._add_specs and self._doc:
            # Register documentation before root if enabled
            app_or_blueprint.add_url_rule(self._doc, 'doc', self.render_doc)
        #app_or_blueprint.add_url_rule(self._doc, 'root', self.render_root)

######################################################################
# Configure Swagger before initilaizing it
######################################################################
api = Api(app,
          version='1.0.0',
          title='Order Demo REST API Service',
          description='This is a sample server Order store server.',
          default='orders',
          default_label='Order operations',
          doc='/apidocs/' # default also could use doc='/apidocs/'
          #authorizations=authorizations
          # prefix='/api'
         )

# Define the model so that the docs reflect what can be sent
order_model = api.model('Order', {
    'id': fields.Integer(readOnly=True, description='The unique id assigned internally by service'),
    'uuid': fields.String(required=True, description='The uuid generated by customer when creating an order'),
    'price': fields.Integer(required=True, description='The price of the product in the Order'),
    'quantity': fields.Integer(required=True, description='The quantity of the product in the Order'),
    'customer_id': fields.Integer(required=True, description='The unique id of the customer who places the Order'),
    'product_id': fields.Integer(required=True, description='The unique id of the product in the Order'),
    'status': fields.String(required=True, description='The status of the Order(In Progress, Delivered, Cancelled)')
})

# query string arguments
order_args = reqparse.RequestParser()
order_args.add_argument('customer_id', type=int, required=False, help='List Orders by customer id')
order_args.add_argument('product_id', type=int, required=False, help='List Orders by product id')

######################################################################
# Error Handlers
######################################################################
# @app.errorhandler(DataValidationError)
# def request_validation_error(error):
#     """ Handles Value Errors from bad data """
#     return bad_request(error)

@app.errorhandler(status.HTTP_404_NOT_FOUND)
def not_found(error):
    """ Handles resources not found with 404_NOT_FOUND """
    message = str(error)
    app.logger.warning(message)
    return jsonify(status=status.HTTP_404_NOT_FOUND,
                   error='Not Found',
                   message=message), status.HTTP_404_NOT_FOUND

@app.errorhandler(status.HTTP_500_INTERNAL_SERVER_ERROR)
def internal_server_error(error):
    """ Handles unexpected server error with 500_SERVER_ERROR """
    message = str(error)
    app.logger.error(message)
    return jsonify(status=status.HTTP_500_INTERNAL_SERVER_ERROR,
                   error='Internal Server Error',
                   message=message), status.HTTP_500_INTERNAL_SERVER_ERROR

######################################################################
# GET INDEX
######################################################################
#@api.route('/')
@app.route('/')
def index():
    """ Root URL response """
    #return jsonify(name='Order Demo REST API Service',
                   #version='1.0',), status.HTTP_200_OK
    return app.send_static_file('index.html')

######################################################################
#  PATH: /orders/{id}
######################################################################
@api.route('/orders/<int:order_id>')
@api.param('order_id', 'The order identifier')
class OrderResource(Resource):
    """
    OrderResource class
    Allows the manipulation of a single Order
    GET /order{id} - Returns an Order with the id
    PUT /order{id} - Update an Order with the id
    DELETE /order{id} -  Deletes an Order with the id
    """

    # ------------------------------------------------------------------
    # RETRIEVE AN ORDER
    # ------------------------------------------------------------------
    @api.doc('get_order')
    @api.response(404, 'Order not found')
    def get(self, order_id):
        """
        Retrieve a single Order
        This endpoint will return an Order based on it's id
        :param order_id:
        :return:
        """
        app.logger.info('Request for an order with id: %s', order_id)
        order = Order.find(order_id)
        # print(order.id)

        if not order:
            raise NotFound("Order with id '{}' was not found.".format(order_id))
        return make_response(jsonify(order.serialize()), status.HTTP_200_OK)
    
    # ------------------------------------------------------------------
    # UPDATE AN EXISTING ORDER
    # ------------------------------------------------------------------
    @api.doc('Update_order')
    @api.response(404, 'Order not found')
    @api.response(400, 'The posted order data was not valid')
    def put(self, order_id):
        """
        Update an Order
        This endpoint will update an Order based the body that is posted
        """
        app.logger.info('Request to update order with id: %s', order_id)
        check_content_type('application/json')
        order = Order.find(order_id)
        if not order:
            raise NotFound("Order with id '{}' was not found.".format(order_id))
        order.deserialize(request.get_json())
        order.id = order_id
        order.save()
        return make_response(jsonify(order.serialize()), status.HTTP_200_OK)
    
    # ------------------------------------------------------------------
    # DELETE AN ORDER
    # ------------------------------------------------------------------
    @api.doc('delete_orders')
    @api.response(204, 'Order deleted')
    def delete(self, order_id):
        """
        Delete an Order
        This endpoint will delete an Order based the body that is posted
        """
        app.logger.info('Request to delete an order with id: %s', order_id)
        order = Order.find(order_id)
        if order:
            order.delete()
        return make_response('', status.HTTP_204_NO_CONTENT)

######################################################################
#  PATH: /orders
######################################################################
@api.route('/orders', strict_slashes=False)
class OrderCollection(Resource):
    """ Handles all interactions with collections of Orders """
    ######################################################################
    # LIST ALL ORDERS
    ######################################################################
    @api.doc('list_orders')
    # @api.marshal_list_with(order_model)
    def get(self):
        """ Returns all of the Orders """
        app.logger.info('Request for order list')
        orders = Order.all()

        results = [order.serialize() for order in orders]
        return make_response(jsonify(results), status.HTTP_200_OK)
    
    ######################################################################
    # ADD A NEW ORDER
    ######################################################################
    @api.doc('create_oders')
    @api.expect(order_model)
    @api.response(400, 'The posted data was not valid')
    @api.response(201, 'Order created successfully')
    @api.marshal_with(order_model, code=201)
    def post(self):
        """
        Creates an Order
        This endpoint will create an Order based the data in the body that is posted
        """
        app.logger.info('Request to create an order')
        check_content_type('application/json')
        order = Order()
        order.deserialize(request.get_json())
        order.save()
        message = order.serialize()
        location_url = api.url_for(OrderCollection, order_id=order.id, _external=True)
        return order.serialize(), status.HTTP_201_CREATED, {'Location': location_url }

######################################################################
# CANCEL AN ORDER
######################################################################
@api.route('/orders/<int:order_id>/cancel')
@api.param('order_id', 'The order identifier')
class OrderCancelResource(Resource):
    """
    Contains resource to cancel a purchase
    """
    @api.doc('Cancel_order')
    @api.response(404, 'Order not cancelled')
    @api.response(400, 'The posted order data was not valid')
    def put(self, order_id):
        """
        Cancel an Order
        This endpoint will cancel an Order based the id specified in the path
        """
        app.logger.info('Request to cancel an order with id: %s', order_id)
        check_content_type('application/json')
        order = Order.find(order_id)
        if not order:
            raise NotFound("Order with id '{}' was not found.".format(order_id))
        order.deserialize(request.get_json())
        order.status = 'Cancelled'
        order.save()
        return make_response(jsonify(order.serialize()), status.HTTP_200_OK)

######################################################################
# LIST ORDERS BASED ON PRODUCT ID
######################################################################
@api.route('/orders/products/<int:product_id>')
@api.param('product_id', 'The product identifier')
class OrderProductListResource(Resource):
    """
    Contains resource for listing orders on product id
    """
    @api.doc('List_by_product_id')
    @api.response(404, 'Product ID not found')
    @api.response(400, 'Posted json is not valid')
    def get(self, product_id):
        """ Returns all of the Orders """
        app.logger.info('Request for order list')
        orders = []
        if product_id:
            orders = Order.find_by_product(product_id)

        results = [order.serialize() for order in orders]
        return make_response(jsonify(results), status.HTTP_200_OK)

######################################################################
# RETRIEVE AN ORDER BASED ON CUSTOMER ID
######################################################################
@api.route('/orders/customers/<int:customer_id>')
@api.param('order_id', 'The order identifier')
class OrderRetreivalCustomerResource(Resource):
    """
    Contains resouce for fetching via customer ID
    """
    @api.doc('Fetch_via_customer')
    @api.response(404, 'Customer ID not found')
    @api.response(400, 'JSON body is invalid')
    def get(self, customer_id):
        """
        Retrieve an order
        This endpoint will return an order based on it's customer id
        """
        print(customer_id)
        app.logger.info('Request for order list based on customer id: %s', customer_id)
        orders = Order.find_by_customer(customer_id)
        if not orders:
            raise NotFound("Order with customer id '{}' was not found.".format(customer_id))
        else:
            results = [order.serialize() for order in orders]
            return make_response(jsonify(results), status.HTTP_200_OK)

######################################################################
# DELETE ALL PET DATA (for testing only)
######################################################################
@app.route('/orders/reset', methods=['DELETE'])
def orders_reset():
    """ Removes all orders from the database """
    Order.remove_all()
    return make_response('', status.HTTP_204_NO_CONTENT)

######################################################################
#  U T I L I T Y   F U N C T I O N S
######################################################################

def init_db():
    """ Initialies the SQLAlchemy app """
    global app
    Order.init_db(app)

def check_content_type(content_type):
    """ Checks that the media type is correct """


def initialize_logging(log_level=logging.INFO):
    """ Initialized the default logging to STDOUT """
